// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrRespStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type AnalyzeImagePostOK struct {
	Content OptString `json:"content"`
}

// GetContent returns the value of Content.
func (s *AnalyzeImagePostOK) GetContent() OptString {
	return s.Content
}

// SetContent sets the value of Content.
func (s *AnalyzeImagePostOK) SetContent(val OptString) {
	s.Content = val
}

type AnalyzeImagePostReq struct {
	Image OptString `json:"image"`
}

// GetImage returns the value of Image.
func (s *AnalyzeImagePostReq) GetImage() OptString {
	return s.Image
}

// SetImage sets the value of Image.
func (s *AnalyzeImagePostReq) SetImage(val OptString) {
	s.Image = val
}

type ErrResp struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrResp) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrResp) SetError(val OptString) {
	s.Error = val
}

// ErrRespStatusCode wraps ErrResp with StatusCode.
type ErrRespStatusCode struct {
	StatusCode int
	Response   ErrResp
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrRespStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrRespStatusCode) GetResponse() ErrResp {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrRespStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrRespStatusCode) SetResponse(val ErrResp) {
	s.Response = val
}

// NewOptAnalyzeImagePostReq returns new OptAnalyzeImagePostReq with value set to v.
func NewOptAnalyzeImagePostReq(v AnalyzeImagePostReq) OptAnalyzeImagePostReq {
	return OptAnalyzeImagePostReq{
		Value: v,
		Set:   true,
	}
}

// OptAnalyzeImagePostReq is optional AnalyzeImagePostReq.
type OptAnalyzeImagePostReq struct {
	Value AnalyzeImagePostReq
	Set   bool
}

// IsSet returns true if OptAnalyzeImagePostReq was set.
func (o OptAnalyzeImagePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnalyzeImagePostReq) Reset() {
	var v AnalyzeImagePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnalyzeImagePostReq) SetTo(v AnalyzeImagePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnalyzeImagePostReq) Get() (v AnalyzeImagePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnalyzeImagePostReq) Or(d AnalyzeImagePostReq) AnalyzeImagePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PingGetOK struct {
	Content OptString `json:"content"`
}

// GetContent returns the value of Content.
func (s *PingGetOK) GetContent() OptString {
	return s.Content
}

// SetContent sets the value of Content.
func (s *PingGetOK) SetContent(val OptString) {
	s.Content = val
}
